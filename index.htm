<!DOCTYPE html>
<html>
	<head>
		<title>GitHub Game Off 2012</title>

		<script type="text/javascript">
			var cellWidth = 16;
			var cellHeight = 16;
			var cellsH = 16;
			var cellsV = 16;
			var borderWidth = 16;

			function getWidth() {
				return cellWidth * cellsH;
			}
			function getHeight() {
				return cellHeight * cellsV;
			}
		</script>

		<link rel="stylesheet/less" type="text/less" href="style.less">
		<script type="text/javascript" src="less.js"></script>

		<script type="text/javascript" src="jquery.js"></script>
		<script type="text/javascript" src="input.js"></script>
	</head>
	<body>
		<div id="container">
			<div id="arena">
				<div id="border-tl"></div><div id="border-t"></div><div id="border-tr"></div>
				<div id="border-l"></div><canvas id="gameCanvas"></canvas><div id="border-r"></div>
				<div id="border-bl"></div><div id="border-b"></div><div id="border-br"></div>
			</div>
			<div id="controls">
				Functions: <select id="functions" name="functions">
					<option value="main">main</option>
				</select><br />
				<button id="createFunction" onClick="createFunction()">Create Function</button>
				<button id="deleteFunction" onCLick="deleteFunction()" disabled="true">Delete Function</button><br />
				Instructions:<br />
				<select id="code" multiple>

				</select><br />
				<div style="font-style: italic; font-size: 12px; margin: 0px; padding: 0px; text-align: center;">
					To insert code before a command, select the command<br />
					To append code, <span class="fakeLink" onClick="$('#code').val('')">deselect</span> everything
				</div>
				<ul id="commands">
					Move:<br />
					<li><button id="moveLeft" onClick="addCommand(1)"><img alt="Move Left" src="images/cmd_left.png" /></button></li>
					<li><button id="moveRight" onClick="addCommand(2)"><img alt="Move Right" src="images/cmd_right.png" /></button></li>
					<li><button id="moveUp" onClick="addCommand(3)"><img alt="Move Up" src="images/cmd_up.png" /></button></li>
					<li><button id="moveDown" onClick="addCommand(4)"><img alt="Move Down" src="images/cmd_down.png" /></button></li><br />
					Clone:<br />
					<li><button id="cloneLeft" onClick="addCloneCommand(5)"><img alt="Clone Left" src="images/cmd_clone_left.png" /></button></li>
					<li><button id="cloneRight" onClick="addCloneCommand(6)"><img alt="Clone Right" src="images/cmd_clone_right.png" /></button></li>
					<li><button id="cloneUp" onClick="addCloneCommand(7)"><img alt="Clone Up" src="images/cmd_clone_up.png" /></button></li>
					<li><button id="cloneDown" onClick="addCloneCommand(8)"><img alt="Clone Down" src="images/cmd_clone_down.png" /></button></li>
				</ul>
				<div id="commandsExtra">
					Others:<br />
					<button id="doNothing" onClick="addCommand(0)">Do Nothing</button>
					<button id="deleteCommand" onClick="deleteCommands()" disabled="true">Delete Command(s)</button>
					<button id="clearCommands" onClick="clearCommands()">Clear Commands</button>
				</div>
			</div>
			<div id="mainControls">
				<select id="levelSelect">
					<option value="l0">Tutorial</option>
					<option value="l1">Level 1</option>
					<option value="l2">Level 2</option>
				</select>
				<button id="runCode" onClick="runCode()" disabled="true">Run Code</button>
				<button id="resetLevel" onClick="resetLevel()" disabled="true">Reset Level</button>
			</div>
		</div>

		<script type="text/javascript">
			var c = document.getElementById("gameCanvas");
			var ctx = c.getContext("2d");
			var w = c.width = getWidth(); var h = c.height = getHeight();

			var mainBot;
			var otherBots = new Array();
			var mainBotCmds = new Array();
			var functions = new Array();

			var stepTimer = 0;
			var ticksPerStep = 8;
			var running = false;

			var mainInstruction = -1;
			var otherInstructions = new Array();

			var NOTHING = 0;
			var MOVE_LEFT = 1;
			var MOVE_RIGHT = 2;
			var MOVE_UP = 3;
			var MOVE_DOWN = 4;
			var CLONE_LEFT = 5;
			var CLONE_RIGHT = 6;
			var CLONE_UP = 7;
			var CLONE_DOWN = 8;

			var mapData;

			var MD_EMPTY = 0;
			var MD_BLOCK = 1;
			var MD_GOAL = 2;

			function Bot(x, y, func) {
				this.x = x;
				this.y = y;
				this.nx = x;
				this.ny = y;
				this.func = func;
			}

			Command = function(id, meta) {
				this.id = id;
				this.meta = meta;
			}

			var cmdText = ["Do Nothing", "Move Left", "Move Right", "Move Up", "Move Down", "Clone Left", "Clone Right", "Clone Up", "Clone Down"];

			var botImg = new Image();
			botImg.src = "images/bot.png";

			function updateButtonDisables() {
				$("#deleteCommand").attr('disabled', !$("#code").val());
				$("#deleteFunction").attr('disabled', $("#functions").val() == "main");
			}

			function populateCommandList() {
				$("#code").html("");
				var cmdList = mainBotCmds;
				if($("#functions").val() != "main")
					cmdList = functions[parseInt($("#functions").val().substring(1))];
				var n = $("#code option").length;
				for(var i = 0; i < cmdList.length; i++) {
					$("#code").append($('<option>', { value: "c" + n, text : cmdText[cmdList[i].id] + (cmdList[i].meta ? " (" + cmdList[i].meta + ")" : "") }));
					n++;
				}
			}

			function createFunction() {
				if(running) return;
				var name = window.prompt("Function name:", "");
				var validName = (name != "" && name.length < 15);
				if(validName)
					$("#functions option").each(function(i) {
						if($(this).text() == name)
							validName = false;
					});

				if(!validName)
					alert("Invalid name: " + name);
				else {
					var n = $("#functions option").length - 1;
					$("#functions").append($("<option>", { value: "f" + n, text: name}));
					$("#functions").val("f" + n);
					functions.push(new Array());
				}
				updateButtonDisables();
				populateCommandList();
			}

			function deleteFunction() {
				if(running) return;
				if($("#functions").val() != "main" && window.confirm("Are you sure?")) {
					var n = parseInt($("#functions").val().substring(1));
					functions.splice(n, 1);
					$("#functions :selected").remove();
					$("#functions option").each(function(i) {
						if($(this).val() != "main")
							$(this).val("f" + (i - 1));
					});
				}
				
				updateButtonDisables();
			}

			function addCommand(id) {
				if(running) return;
				addRawCommand(new Command(id, ""));
			}

			function addCloneCommand(id) {
				if(running) return;
				var func = window.prompt("Which function would you like to clone into?", "main");
				var valid = func == "main";
				if(!valid)
					$("#functions option").each(function(i) {
						if($(this).text() == func)
							valid = true;
					});

				if(valid)
					addCommand(id, func);
				else
					alert("Invalid function: " + func);
			}

			function addCommand(id, meta) {
				if(running) return;
				cmd = new Command(id, meta);
				var before = -1;
				if($("#code :selected").length == 1)
					before = parseInt($("#code :selected").val().substring(1));

				if($("#functions").val() == "main") {
					if(before >= 0)
						mainBotCmds.splice(before, 0, cmd);
					else
						mainBotCmds.push(cmd);
				}
				else {
					var n = parseInt($("#functions").val().substring(1));
					if(before >= 0)
						functions[n].splice(before, 0, cmd);
					else
						functions[n].push(cmd);
				}
				populateCommandList();
			}

			function deleteCommands() {
				if(running) return;
				var n;
				if($("#functions").val() != "main")
					n = parseInt($("#functions").val().substring(1));
				
				var toSplice = new Array();
				$("#code :selected").each(function(num) {
					var i = parseInt($(this).val().substring(1));
					toSplice.push(i - toSplice.length);
				});
				$("#code :selected").remove();
				$("#code option").each(function(i) {
					$(this).val("c" + i);
				});
				
				for(var i = 0; i < toSplice.length; i++) {
					var x = toSplice[i];
					if($("#functions").val() == "main")
						mainBotCmds.splice(x, 1);
					else
						functions[parseInt($("#functions").val().substring(1))].splice(x, 1);
				};

				updateButtonDisables();
			}

			function clearCommands() {
				if(running) return;
				if($("#functions").val() == "main")
					mainBotCmds = [];
				else
					functions[parseInt($("#functions").val().substring(1))] = [];
				populateCommandList();
			}

			$("#code").change(updateButtonDisables);
			$("#functions").change(function() {
				updateButtonDisables();
				populateCommandList();
			});

			function createClone(x, y, func) {
				var bot = new Bot(x, y, func);
				otherBots.push(bot);
				otherInstructions.push(-1);
			}

			function processCommand(cmd, bot) {
				bot.nx = bot.x;
				bot.ny = bot.y;

				if(cmd.id == DO_NOTHING) return;

				if(cmd.id == MOVE_LEFT && bot.x > 0 && !mapData[bot.x - 1, bot.y]) bot.nx = bot.x - 1;
				if(cmd.id == MOVE_RIGHT && bot.x < cellsH - 1 && !mapData[bot.x + 1, bot.y]) bot.nx = bot.x + 1;
				if(cmd.id == MOVE_UP && bot.y > 0 && !mapData[bot.x, bot.y - 1]) bot.ny = bot.y - 1;
				if(cmd.id == MOVE_DOWN && bot.y < cellsV - 1 && !mapData[bot.x, bot.y + 1]) bot.ny = bot.y + 1;

				if(cmd.id == CLONE_LEFT && bot.x > 0 && !mapData[bot.x - 1, bot.y]) createClone(bot.x - 1, bot.y, cmd.meta);
				if(cmd.id == CLONE_RIGHT && bot.x < cellsH - 1 && !mapData[bot.x + 1, bot.y]) createClone(bot.x + 1, bot.y, cmd.meta);
				if(cmd.id == CLONE_UP && bot.y > 0 && !mapData[bot.x, bot.y - 1]) createClone(bot.x, bot.y - 1, cmd.meta);
				if(cmd.id == CLONE_DOWN && bot.y < cellsV - 1 && !mapData[bot.x, bot.y + 1]) createClone(bot.x, bot.y + 1, cmd.meta);
			}

			function getCodeForFunction(name) {
				$("#functions option").each(function(i) {
					if($(this).text() == name)
						return functions[parseInt($(this).val().substring(1))];
				});
			}

			function runCode() {
				running = true;
				mainInstruction = -1;
				otherInstructions = new Array();
			}

			function onUpdate() {
				if(running) {
					if(stepTimer <= 0) {
						mainInstruction++;
						for(var i = 0; i < otherInstructions.length; i++)
							otherInstructions[i]++;
						stepTimer = ticksPerStep;
						
						if(mainInstruction < getCodeForFunction(mainBot.func).length) processCommand(getCodeForFunction(mainBot.func)[mainInstruction], mainBot);
						for(var i = 0; i < otherBots.length; i++)
							if(otherInstructions[i] < getCodeForFunction(otherBots[i].func).length) processCommand(getCodeForFunction(otherBots[i].func)[otherInstructions[i]], otherBots[i]);
					}
					else 
						stepTimer--;

					var won = true;
					for(var i = 0; i < cellsH; i++)
						for(var j = 0; j < cellsV; j++)
							if(mapData[i, j] == MD_GOAL) {
								var claimed = false;
								for(var n = 0; n < otherBots.length; n++)
									if(otherBots.x == i && otherBots.y == j)
										claimed = true;
								if(!claimed) won = false;
							}

					if(won) {
						running = false;
						alert("You win!")
					}
				}
			}

			function draw() {
				ctx.save();
				ctx.fillStyle = "#E0E0E0";
				ctx.fillRect(0, 0, w, h);

				ctx.strokeStyle = "#808080";
				ctx.lineWidth = 1;
				for(var i = 0; i <= cellsH; i++) {
					ctx.beginPath();
					ctx.moveTo(i * cellWidth, 0);
					ctx.lineTo(i * cellWidth, h);
					ctx.stroke();

					ctx.beginPath();
					ctx.moveTo(0, i * cellHeight);
					ctx.lineTo(w, i * cellHeight);
					ctx.stroke();
				}

				if(mapData) {
					for(var i = 0; i < cellsH; i++)
						for(var j = 0; j < cellsV; j++) {
							if(mapData[i, j] == MD_BLOCK) ctx.drawImage(blockImg, i * cellWidth, j * cellHeight);
							if(mapData[i, j] == MD_GOAL) ctx.drawImage(goalImg, i * cellWidth, j * cellHeight);
						}
					ctx.drawImage(botImg, cellWidth * (mainBot.x + (mainBot.nx - mainBot.x) * stepTimer / ticksPerStep), cellHeight * (mainBot.y + (mainBot.ny - mainBot.y) * stepTimer / ticksPerStep));
					for(var i = 0; i < otherBots.length; i++)
						ctx.drawImage(botImg,  cellWidth * (otherBots[i].x + (otherBots[i].nx - otherBots[i].x) * stepTimer / ticksPerStep), cellHeight * (otherBots[i].y + (otherBots[i].ny - otherBots[i].y) * stepTimer / ticksPerStep));
				}

				ctx.restore();
			}

			function gameLoop() {
				onUpdate();
				draw();
			}

			$(document).ready(function() {
				mainBot = new Bot(0, 0, "main");
				branches = new Array();
				input = new Input();

				$(document).keydown(function(e) {
					input.keydown(e);
				});

				$(document).keyup(function(e) {
					input.keyup(e);
				});

				setInterval(gameLoop, 10);
			});
		</script>
	</body>
</html>
