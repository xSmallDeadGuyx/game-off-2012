<!DOCTYPE html>
<html>
	<head>
		<title>GitHub Game Off 2012</title>
		<script type="text/javascript">
			var cellWidth = 16;
			var cellHeight = 16;
			var cellsH = 16;
			var cellsV = 16;
			var borderWidth = 16;

			function getWidth() {
				return cellWidth * cellsH;
			}
			function getHeight() {
				return cellHeight * cellsV;
			}

			var levels = ["Tutorial_1", "Tutorial_2", "Tutorial_3"];
		</script>

		<link rel="stylesheet/less" type="text/less" href="style.less">
		<script type="text/javascript" src="less.js"></script>

		<script type="text/javascript" src="jquery.js"></script>
	</head>
	<body>
		<div class="overlay" id="alert" style="display: none">
			<div id="content">
				<span id="message"></span><br />
				<button onclick="hideAlert()">Ok</button>
			</div>
		</div>
		<div class="overlay" id="confirm" style="display: none">
			<div id="content">
				<span id="message"></span><br />
				<span id="buttons"></span>
			</div>
		</div>
		<div class="overlay" id="prompt" style="display: none">
			<div id="content">
				<span id="message"></span><br />
				<input type="text" id="input"><br />
				<button id="ok" onclick="hidePrompt(true)">Ok</button><button id="cancel" onclick="hidePrompt(false)">Cancel</button>
			</div>
		</div>
		<script type="text/javascript">
			var onHide;
			function showAlert(msg, callback) {
				$("#alert #message").text(msg);
				$("#alert").show();
				onHide = callback;
			}

			function hideAlert() {
				$("#alert").hide();
				if(onHide)
					onHide();
			}

			function showConfirm(msg, callback, buttons) {
				if(!callback) return;
				onHide = callback;
				var b = buttons ? buttons : ["Yes", "No"];
				var t = "";
				for(var i = 0; i < b.length; i++)
					t += '<button onclick="hideConfirm(' + i + ')">' + b[i] + '</button>';
				$("#confirm #buttons").html(t);
				$("#confirm #message").text(msg);
				$("#confirm").show();
			}

			function hideConfirm(n) {
				$("#confirm").hide();
				onHide(n);
			}

			function showPrompt(msg, def, callback) {
				if(!callback) return;
				onHide = callback;
				$("#prompt #message").text(msg);
				$("#prompt #input").val(def ? def : "");
				$("#prompt").show();
				$("#prompt #input").select();
			}

			$("#prompt #input").keyup(function(event){
			    if(event.keyCode == 13)
			        $("#prompt #ok").click();
			});

			function hidePrompt(complete) {
				$("#prompt").hide();
				if(complete) onHide($("#prompt #input").val());
			}
		</script>
		<div id="container">
			<div id="arena">
				<div id="border-tl"></div><div id="border-t"></div><div id="border-tr"></div>
				<div id="border-l"></div><canvas id="gameCanvas"></canvas><div id="border-r"></div>
				<div id="border-bl"></div><div id="border-b"></div><div id="border-br"></div>
			</div>
			<div id="controls">
				Functions: <select id="functions" name="functions">
					<option value="main">main</option>
				</select><br />
				<button id="createFunction" onClick="createFunction()">Create Function</button>
				<button id="deleteFunction" onCLick="deleteFunction()" disabled="true">Delete Function</button><br />
				Instructions:<br />
				<select id="code" multiple>

				</select><br />
				<div style="font-style: italic; font-size: 12px; margin: 0px; padding: 0px; text-align: center;">
					To insert code before a command, select the command<br />
					To append code, <span class="fakeLink" onClick="$('#code').val('')">deselect</span> everything
				</div>
				<ul id="commands">
					Move:<br />
					<li><button id="moveLeft" onClick="addCommand(1)"><img alt="Move Left" src="images/cmd_left.png" /></button></li>
					<li><button id="moveRight" onClick="addCommand(2)"><img alt="Move Right" src="images/cmd_right.png" /></button></li>
					<li><button id="moveUp" onClick="addCommand(3)"><img alt="Move Up" src="images/cmd_up.png" /></button></li>
					<li><button id="moveDown" onClick="addCommand(4)"><img alt="Move Down" src="images/cmd_down.png" /></button></li><br />
					Clone:<br />
					<li><button id="cloneLeft" onClick="addCloneCommand(5)"><img alt="Clone Left" src="images/cmd_clone_left.png" /></button></li>
					<li><button id="cloneRight" onClick="addCloneCommand(6)"><img alt="Clone Right" src="images/cmd_clone_right.png" /></button></li>
					<li><button id="cloneUp" onClick="addCloneCommand(7)"><img alt="Clone Up" src="images/cmd_clone_up.png" /></button></li>
					<li><button id="cloneDown" onClick="addCloneCommand(8)"><img alt="Clone Down" src="images/cmd_clone_down.png" /></button></li>
				</ul>
				<div id="commandsExtra">
					Others:<br />
					<button id="doNothing" onClick="addCommand(0)">Do Nothing</button>
					<button id="deleteCommand" onClick="deleteCommands()" disabled="true">Delete Command(s)</button>
					<button id="clearCommands" onClick="clearCommands()">Clear Commands</button>
				</div>
			</div>
			<div id="mainControls">
				<button id="runCode" onClick="runCode()" disabled="true">Run Code</button>
			</div>
			<div id="info">
			</div>
		</div>

		<script type="text/javascript">
			var c = document.getElementById("gameCanvas");
			var ctx = c.getContext("2d");
			var w = c.width = getWidth(); var h = c.height = getHeight();

			var mainBot;
			var otherBots = new Array();
			var mainBotCmds = new Array();
			var functions = new Array();

			var stepTimer = 0;
			var ticksPerStep = 16;
			var running = false;
			var ranOnce = false;
			var levelComplete = false;

			var mainInstruction = -1;
			var otherInstructions = new Array();

			var isBeingMovedTo = new Array();

			var DO_NOTHING = 0;
			var MOVE_LEFT = 1;
			var MOVE_RIGHT = 2;
			var MOVE_UP = 3;
			var MOVE_DOWN = 4;
			var CLONE_LEFT = 5;
			var CLONE_RIGHT = 6;
			var CLONE_UP = 7;
			var CLONE_DOWN = 8;

			var mapData;
			var levelLoaded = false;
			var goals;
			var levelStart;

			var MD_EMPTY = 0;
			var MD_BLOCK = 1;
			var MD_GOAL = 2;

			var levelNum = 0;

			var fails = new Array();5

			function Bot(x, y, func) {
				this.x = x;
				this.y = y;
				this.nx = x;
				this.ny = y;
				this.func = func;
				this.cloning = false;

				this.onGoal = function() {
					for(var i = 0; i < goals.length; i++)
						if(this.x == goals[i].x && this.y == goals[i].y)
							return true;
					return false;
				}
			}

			function Goal(x, y) {
				this.x = x;
				this.y = y;

				this.isComplete = function() {
					if(mainBot.x == this.x && mainBot.y == this.y) return true;
					for(var i = 0; i < otherBots.length; i++)
						if(otherBots[i].x == this.x && otherBots[i].y == this.y)
							return true;
					return false;
				};
			}

			function Position(x, y) {
				this.x = x;
				this.y = y;
			}

			Command = function(id, meta) {
				this.id = id;
				this.meta = meta;
			}

			var cmdText = ["Do Nothing", "Move Left", "Move Right", "Move Up", "Move Down", "Clone Left", "Clone Right", "Clone Up", "Clone Down"];

			var botImg = new Image();
			botImg.src = "images/bot.png";

			var blockImg = new Image();
			blockImg.src = "images/block.png";

			var goalImg = new Image();
			goalImg.src = "images/goal.png";

			function updateButtonDisables() {
				$("#deleteCommand").attr('disabled', !$("#code").val());
				$("#deleteFunction").attr('disabled', $("#functions").val() == "main");
				$("#runCode").attr('disabled', !levelLoaded || $("#code option").length == 0 || ranOnce || running);
			}

			function populateCommandList() {
				$("#code").html("");
				var cmdList = mainBotCmds;
				if($("#functions").val() != "main")
					cmdList = functions[parseInt($("#functions").val().substring(1))];
				var n = $("#code option").length;
				for(var i = 0; i < cmdList.length; i++) {
					$("#code").append($('<option>', { value: "c" + n, text : cmdText[cmdList[i].id] + (cmdList[i].meta ? " (" + cmdList[i].meta + ")" : "") }));
					n++;
				}
			}

			function createFunction(stay, callback) {
				if(running) return;
				showPrompt("Function name:", "", function(name) {
					var validName = (name != "" && name.length < 15);
					if(validName)
						$("#functions option").each(function(i) {
							if($(this).text() == name)
								validName = false;
						});
					if(name != null) {
						if(!validName)
							showAlert("Invalid name: " + name);
						else {
							var n = $("#functions option").length - 1;
							$("#functions").append($("<option>", { value: "f" + n, text: name}));
							if(!stay) $("#functions").val("f" + n);
							functions.push(new Array());
							updateButtonDisables();
							populateCommandList();
							callback(name);
							return;
						}
					}
					updateButtonDisables();
					populateCommandList();
				});
			}

			function deleteFunction() {
				if(running) return;
				if($("#functions").val() != "main") 
					showConfirm("Are you sure?", function(id) {
						if(id == 0) {
							var n = parseInt($("#functions").val().substring(1));
							functions.splice(n, 1);
							$("#functions :selected").remove();
							$("#functions option").each(function(i) {
								if($(this).val() != "main")
									$(this).val("f" + (i - 1));
							});
						}
						updateButtonDisables();
					});
			}

			function addCommand(id) {
				if(running) return;
				addMetaCommand(id, "");
			}

			function addCloneCommand(id) {
				if(running) return;
				var funcs = [];
				$("#functions option").each(function(i) {
					funcs.push($(this).text());
				});
				var count = funcs.length;
				funcs.push("Create New Command");
				funcs.push("Cancel");
				showConfirm("Choose a function to clone into", function(n) {
					if(n < count) {
						var name = "";
						if(n == 0) name = "main";
						else name = $('#functions [value="f' + (n - 1) + '"]').text();
						addMetaCommand(id, name);
					}
					if(n == count)
						createFunction(true, function(name) {
							addMetaCommand(id, name);
						});
				}, funcs);
			}

			function addMetaCommand(id, meta) {
				if(running) return;
				cmd = new Command(id, meta);
				var before = -1;
				if($("#code :selected").length == 1)
					before = parseInt($("#code :selected").val().substring(1));

				if($("#functions").val() == "main") {
					if(before >= 0)
						mainBotCmds.splice(before, 0, cmd);
					else
						mainBotCmds.push(cmd);
				}
				else {
					var n = parseInt($("#functions").val().substring(1));
					if(before >= 0)
						functions[n].splice(before, 0, cmd);
					else
						functions[n].push(cmd);
				}
				populateCommandList();
				updateButtonDisables();
			}

			function deleteCommands() {
				if(running) return;
				var n;
				if($("#functions").val() != "main")
					n = parseInt($("#functions").val().substring(1));
				
				var toSplice = new Array();
				$("#code :selected").each(function(num) {
					var i = parseInt($(this).val().substring(1));
					toSplice.push(i - toSplice.length);
				});
				$("#code :selected").remove();
				$("#code option").each(function(i) {
					$(this).val("c" + i);
				});
				
				for(var i = 0; i < toSplice.length; i++) {
					var x = toSplice[i];
					if($("#functions").val() == "main")
						mainBotCmds.splice(x, 1);
					else
						functions[parseInt($("#functions").val().substring(1))].splice(x, 1);
				};

				updateButtonDisables();
			}

			function clearCommands() {
				if(running) return;
				if($("#functions").val() == "main")
					mainBotCmds = [];
				else
					functions[parseInt($("#functions").val().substring(1))] = [];
				populateCommandList();
			}

			$("#code").change(updateButtonDisables);
			$("#functions").change(function() {
				updateButtonDisables();
				populateCommandList();
			});

			function resetCode() {
				functions = new Array();
				mainBotCmds = new Array();
				$("#functions option").each(function(i) {
					if($(this).val() != "main")
						$(this).remove();
				});
				$("#functions").val("main");
				populateCommandList();
			}

			function loadLevel() {
				return loadCustomLevel("levels/" + levels[levelNum] + ".txt");
			}

			function loadCustomLevel(level) {
				var loaded = false;
				$.ajax({
					url : level,
					success : function(result) {
						loaded = true;
						levelLoaded = false;
						ranOnce = false;
						levelComplete = false;

						goals = new Array();
						mapData = new Array();
						for(var i = 0; i < cellsH; i++)
							mapData.push(new Array());
						var d = result.split("\n");
						var foundStart = false;
						for(var j = 0; j < cellsV; j++)
							for(var i = 0; i < cellsH; i++) {
								if(j < d.length && i < d[j].length) {
									var c = d[j].charAt(i);
									mapData[i][j] = c == " " ? MD_EMPTY : c == "#" ? MD_BLOCK : c == "X" ? MD_GOAL : MD_EMPTY;
									if(c == "X")
										goals.push(new Goal(i, j));
									if(c == "S")
										if(foundStart) {
											showAlert("Invalid level, multiple start positions found");
											return;
										}
										else {
											mainBot.x = mainBot.nx = i;
											mainBot.y = mainBot.ny = j;
											levelStart = new Position(i, j);
											foundStart = true;
										}
								}
								else
									mapData[i][j] = MD_EMPTY;
							}
						if(!foundStart) {
							showAlert("Invalid level, no start positions found");
							return;
						}
						if(d.length > cellsV) {
							var text = "";
							for(var i = 0; i < d.length - cellsV; i++)
								text += (text == "" ? "" : "<br />") + d[cellsV + i];
							$("#info").html(text);
						}
						levelLoaded = true;
						updateButtonDisables();
					}
				});
				return loaded;
			}

			function spaceClear(x, y) {
				if(mapData[x][y] == MD_BLOCK) return false;
				if((mainBot.x == x && mainBot.y == y) || (mainBot.nx == x && mainBot.ny == y)) return false;
				for(var i = 0; i < otherBots.length; i++)
					if((otherBots[i].x == x && otherBots[i].y == y) || (otherBots[i].nx == x && otherBots[i].ny == y)) return false;
				return true;
			}

			function createClone(x, y, func, fbot) {
				var bot = new Bot(fbot.x, fbot.y, func);
				bot.nx = x;
				bot.ny = y;
				bot.cloning = true;
				otherBots.push(bot);
				otherInstructions.push(-1);
			}

			function processCommand(cmd, bot) {
				bot.nx = bot.x;
				bot.ny = bot.y;

				if(cmd.id == DO_NOTHING) return;

				if(cmd.id == MOVE_LEFT && bot.x > 0 && spaceClear(bot.x - 1, bot.y)) bot.nx = bot.x - 1;
				if(cmd.id == MOVE_RIGHT && bot.x < cellsH - 1 && spaceClear(bot.x + 1, bot.y)) bot.nx = bot.x + 1;
				if(cmd.id == MOVE_UP && bot.y > 0 && spaceClear(bot.x, bot.y - 1)) bot.ny = bot.y - 1;
				if(cmd.id == MOVE_DOWN && bot.y < cellsV - 1 && spaceClear(bot.x, bot.y + 1)) bot.ny = bot.y + 1;

				if(cmd.id == CLONE_LEFT && bot.x > 0 && spaceClear(bot.x - 1, bot.y)) createClone(bot.x - 1, bot.y, cmd.meta, bot);
				if(cmd.id == CLONE_RIGHT && bot.x < cellsH - 1 && spaceClear(bot.x + 1, bot.y)) createClone(bot.x + 1, bot.y, cmd.meta, bot);
				if(cmd.id == CLONE_UP && bot.y > 0 && spaceClear(bot.x, bot.y - 1)) createClone(bot.x, bot.y - 1, cmd.meta, bot);
				if(cmd.id == CLONE_DOWN && bot.y < cellsV - 1 && spaceClear(bot.x, bot.y + 1)) createClone(bot.x, bot.y + 1, cmd.meta, bot);
			}

			function getCodeForFunction(name) {
				if(name == "main")
					return mainBotCmds;
				var n = -1;
				$("#functions option").each(function(i) {
					if($(this).text() == name)
						n = parseInt($(this).val().substring(1));
				});
				if(n > -1) return functions[n];
			}

			function runCode() {
				if(levelLoaded) {
					running = true;
					mainInstruction = -1;
					otherInstructions = new Array();
					otherBots = new Array();
					ranOnce = true;
					updateButtonDisables();
				}
			}

			function resetLevel() {
				mainBot.x = mainBot.nx = levelStart.x;
				mainBot.y = mainBot.ny = levelStart.y;
				ranOnce = false;
				levelComplete = false;
				otherBots = new Array();
				updateButtonDisables();
				running = false;
				fails = new Array();
			}

			function onUpdate() {
				if(running) {
					if(stepTimer <= 0) {
						isBeingMovedTo = new Array();
						for(var i = 0; i < cellsH; i++)
							isBeingMovedTo.push(new Array());
						for(var j = 0; j < cellsV; j++)
							for(var i = 0; i < cellsH; i++)
								isBeingMovedTo[i][j] = false;

						var len = otherBots.length;
						mainInstruction++;
						mainBot.x = mainBot.nx;
						mainBot.y = mainBot.ny;
						stepTimer = ticksPerStep;
						
						var finished = true;
						if(mainInstruction < getCodeForFunction(mainBot.func).length) {
							finished = false;
							processCommand(getCodeForFunction(mainBot.func)[mainInstruction], mainBot);
						}
						for(var i = 0; i < len; i++) {
							otherInstructions[i]++;
							otherBots[i].x = otherBots[i].nx;
							otherBots[i].y = otherBots[i].ny;
							otherBots[i].cloning = false;
							var fetchedCode = getCodeForFunction(otherBots[i].func);
							if(otherInstructions[i] < fetchedCode.length) {
								finished = false;
								processCommand(fetchedCode[otherInstructions[i]], otherBots[i]);
							}
						}
						if(finished) {
							running = false;

							fails = new Array();
							for(var i = 0; i < goals.length; i++)
								if(!goals[i].isComplete())
									fails.push(goals[i]);

							if(!mainBot.onGoal()) 
								fails.push(mainBot);
							for(var i = 0; i < otherBots.length; i++)
								if(!otherBots[i].onGoal())
									fails.push(otherBots[i]);
							
							if(fails.length > 0) {
								showAlert("Some objects have failed! Check all goals are complete and no redundant bots are made!", function x() {
									resetLevel();
								});
								return;
							}
							levelNum++;
							if(levelNum < levels.length) {
								showAlert("Level Complete! Advancing to the next level", function x() {
									resetCode();
									loadLevel();
									resetLevel();
								});
							}
							else
								showAlert("Game Complete! Currently have no more levels left for you, maybe try some custom levels?");
							updateButtonDisables();
						}
					}
					else 
						stepTimer--;
				}
			}

			function draw() {
				ctx.save();
				ctx.fillStyle = "#E0E0E0";
				ctx.fillRect(0, 0, w, h);

				ctx.strokeStyle = "#808080";
				ctx.lineWidth = 1;
				for(var i = 0; i <= cellsH; i++) {
					ctx.beginPath();
					ctx.moveTo(i * cellWidth, 0);
					ctx.lineTo(i * cellWidth, h);
					ctx.stroke();

					ctx.beginPath();
					ctx.moveTo(0, i * cellHeight);
					ctx.lineTo(w, i * cellHeight);
					ctx.stroke();
				}

				if(levelLoaded) {
					for(var i = 0; i < cellsH; i++)
						for(var j = 0; j < cellsV; j++) {
							if(mapData[i][j] == MD_BLOCK) ctx.drawImage(blockImg, i * cellWidth, j * cellHeight);
							if(mapData[i][j] == MD_GOAL) ctx.drawImage(goalImg, i * cellWidth, j * cellHeight);
						}

					ctx.drawImage(botImg, cellWidth * (mainBot.x + (mainBot.nx - mainBot.x) * (1 - stepTimer / ticksPerStep)), cellHeight * (mainBot.y + (mainBot.ny - mainBot.y) * (1 - stepTimer / ticksPerStep)));
					for(var i = 0; i < otherBots.length; i++) {
						if(otherBots[i].cloning) ctx.globalAlpha = 0.5;
						ctx.drawImage(botImg,  cellWidth * (otherBots[i].x + (otherBots[i].nx - otherBots[i].x) * (1 - stepTimer / ticksPerStep)), cellHeight * (otherBots[i].y + (otherBots[i].ny - otherBots[i].y) * (1 - stepTimer / ticksPerStep)));
						ctx.globalAlpha = 1;
					}

					for(var i = 0; i < fails.length; i++) {
						ctx.globalAlpha = 0.5;
						ctx.fillStyle = "#FF0000"
						ctx.fillRect(fails[i].x * cellWidth, fails[i].y * cellHeight, cellWidth, cellHeight);
						ctx.globalAlpha = 1;
					}
				}

				ctx.restore();
			}

			function gameLoop() {
				onUpdate();
				draw();
			}

			$(document).ready(function() {
				mainBot = new Bot(0, 0, "main");
				branches = new Array();
				loadLevel();

				setInterval(gameLoop, 10);
			});
		</script>
	</body>
</html>
